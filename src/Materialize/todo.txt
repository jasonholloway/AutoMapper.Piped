
TO DO! ********************************************

> Unfortunately, need to fix up the query snooper, to get an idea of what's going on undercover.
	
	So, what are we going to show?

	The transition buffer, before and after optimization.

	Any reports that the schemes feel they want to pass us - or rather, what some dynamically-invoked visitors
	want from the schemes. The final scheme will be passed to the snooper.

	Via the snooper, some outside visitor can extract what it needs here (as long as the snooping agency can read internals)

	So, materialize only needs to output the transitions via Snooper, and the scheme.

	THOUGH! The scheme and the transitions will not be present if cached... 
	Reifiers only hold on to the ReifyExecutor and the ParamMap

	So, I reckon that Snooper should snoop a ReifyReport object (if a snooper is in place...)

	this ReifyReport could contain the Transition buffer (only one, cos it's mutable) and the scheme if compiled.
	If served from the cache, then some other content.
	
	Instead of expecting, excessively, a copy of the transition data, we should really be allowing snooping by a visitor
	at the various stages. So, not a dead report, but an opportunity to look and generate whatever to take away. 

	So: ReifyReport is wrong. ****** Seems that ISnooper should be expanded! *******


	A fresh ISnooper is to be fed into reification each time. So, should be satisfied through parammap?









	




> Once this is there, then we can start our optimizing...













> Query-side execution could be more efficient: as is, every node of the tree is crawled and each parameterized constant fulfilled
	only via indirect querying of ArgMap. Could build up a bespoke replacer, with hard references to accessors, feeding on passed incidental query.


> A simplification stage: after the canonical form has been recognised, elements of the query deriving only from constants should all be replaced with calculated constants, emplaced by a set of simplifiers stored against the canonical query along with everything else. The upshot would be that the query to be optimized will be made simpler - some things may be pushed onto the server that otherwise wouldn't (though EF does this already, you know...) BUT: we may shortcircuit the funcletizing in our regime testing...





> Make sure all server filters append to outgoing leg!!!!!!!!!!!!!!

> CollectionFactories should rewrite rather than giving us actual collections...


> Rebasing now has to flip between enumerable and queryable
	It will generally start from enumerable, and want to be rebased to a source-side queryable.
	The mapping layer is the point at which this rebasing of collection type should be done.
	* THIS HAS BEEN SIDESTEPPED BY REBASING PREDICATE LAMBDAS RATHER THAN ENTIRE MULTIPLES 
		the idea was otherwise to get central bridging collection strategy to offer a rebase root
		that would expand to replace sequence methods... but this would be unrewarding, straight-forward toil.


> Could there be some kind of paging behaviour in fetching? Not really. We absolutely can't guarantee the equality of our source.
	We need to fetch the entire set at once!

	But there will be laziness in transformation, if not fetching. That is, post-fetch preparations will only be applied when
	the results are enumerated. Maybe we need a hook point after transformation, to allow after-map hooks to bite.

> Mapping strategies need to be changed to work with queryables

	but only if they take em. Makes most immediate sense with outermost collection, tis true.

	But as soon as the outer collection selects into element-land, then our nice IQueryables are gone.

	We could perhaps pass expressions throughout. But then, as we'd have to be doing with compiling expressions
	for *each* query, down from the snoopable form into executable code, gashness. 

	Plus points: would present all transformations in one general form, coequal with source transformations.
	A step towards a more elegant approach.

	The clientside expression built could be cached somehow. Most simply, it would just be executed each time against
	an EnumerableQuery. This would work quickly.

	In the future, we could parametrize and cache.

	Expressions wouldn't then have to do with IQueryables. They would relate to enumerations and concrete types. There would
	be no inner queryprovider, only a cached compiler, which would run the produced method against the fetched enumerable.

	It would also supply requisite parameters from the source query - that is, it would present extracted constants as parameters
	to the lambda.

	Could we make do temporarily without parameterization and cacheing? Well, yes, but it would be ugly. So be it.

	********************************************************************************************************************

	Would there be a role then for the collectionfactory? Well, yes, as the eventually-compiled lambda will need to 
	materialize to collections as of old.

	We will lose much of our string typing from modifiers. Perhaps this can be a good thing? Base classes will still assert
	types of expressions.

	Outermost collection mapper will append to IEnumerable parameter.















********************************************************************************************************
> Now we are transforming IQueryables it seems... so why don't we just rewrite expressions? Or rather, as that is exactly
	what we are doing... we could get client-side transformation query by snooping on EnumerableQuery populated by mapping.

	to do this, collectionfactory needs to somehow emplace a snooped EnumerableQuery each time...

	the outer mapstrategy does it, usually CollectionMap, though this isn't always the case!

	But, if the overall contraption yields an IQueryable, couldn't this just be sampled post facto?
	Would work, but not in case of unaries, which yield no IQueryable.

	Yet these limiting unaries are solely to do with parsing. The mapper IParseStrategy is therefore a likely spot
	to spy on the inner mapping machinery's yielded queryable.



	CollectionStrategy currently packages up all enumerables into new collections. Laudable.
	But this means eager realisation of source query... We are mapping from IQueryable to IQueryable:
	shouldn't there be a special mapping rule for this? I think this is very, very reasonable.

	If there were a special IQueryable collection rule, then the entire reification would become one big
	queryable chain, all the way through, and only realised at the last moment.

	But the problem with this lovely vision is that some clauses certainly can't be sent to the source server.

	We do need to realise in the middle. So all is currently well and good, except for the fact that Reifiable
	forces our results to a concrete enumerable, before passing to transformation! Transformation itself is
	supposed to achieve this.








**********************************************************************************************************


> In parsing, strategizers and rules are really at same level, have same function.
	Would seem neater to have specialised StrategyCondition classes - or *rules?*

> Changes of cardinality elsewhere are currently ignored in parsing

> Add T4 template to test project, will create 50 random queries, and test result against the same applied to an enumeration. These will all appear in test explorer, and will be refreshable. SourceRegime used should also be
  random (although this latter will give different results each time: not so good!)


> Should all would-be prependers of predicates to the source query be aware of clientside filtering?


> Split to new solution: AutoMapper.Piped
	Problem of git history...
	

> Only explicitly-marked properties should be treated as transitive.


> before-and-after hooks should only apply after all filtering done.


> Client-side filter predicates currently being compiled each time HORRIFIC!!!!!!
	need to parameterize and store with cache...
	This touches on the whole transformer-expression thing.



> Fancy demo project: OData! Info about each request...
	
> EF-mapped entities can't be projected to... need to do this client-side.
	- so, server-side projection that would normally be attempted should be checked with regime - if unacceptable, stick on client (this seems slow...)
	
> Ensure no static dictionaries about: ioc container should deal with this
  

> Test cache behaviour...

> Unary strategies must be sensitive to whether the set has been re-limited on the client:
	different strategies needed in this case 

> Test projection expressions for inputs. Use IProjectionInputDetector interface.

> How to hook in provider-specific extensions from other projects - needed to limit dependencies. 
	Surely has to be some configuration option, and type-gathering at initialization.

> Compiled little functions to cached by their expression trees

> Predicates to be split as much as possible to get as much on server as we can

