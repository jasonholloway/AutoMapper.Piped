
TO DO! ********************************************

> Config class should be passed to MapAs (swallowing ISnooper reference). This would however affect strategy cache.
	So... strategy cache must be keyed on config class too.

	This will allow LinqPad, despite being external, to control strategization fully.


> And of course, config values should be consolidated from static + per query config.
	resolved config class will then affect cache, etc.

	should also be able to specify TypeMaps 

	
	
	
	




> before-and-after hooks should only apply after all filtering done.


> un-rebaseable predicates should either throw consistent exception
  or cause all data to be brought forth first! - dependent on switch


> Fancy demo project: OData! Info about each request...
	
> EF-mapped entities can't be projected to... need to do this client-side.
	- so, server-side projection that would normally be attempted should be checked with regime - if unacceptable, stick on client (this seems slow...)
	
> Ensure no static dictionaries about: ioc container should deal with this
  

> Test cache behaviour...

> Unary strategies must be sensitive to whether the set has been re-limited on the client:
	different strategies needed in this case 

> Test projection expressions for inputs. Use IProjectionInputDetector interface.

> How to hook in provider-specific extensions from other projects - needed to limit dependencies. 
	Surely has to be some configuration option, and type-gathering at initialization.

> Compiled little functions to cached by their expression trees

> Predicates to be split as much as possible to get as much on server as we can

