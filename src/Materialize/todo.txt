
TO DO! ********************************************


***************************************************************************
> A REBASER CLASS PLEASE!
	Will take an expression and an outer IParseStrategy.
	It will handle expressions, so that individual layers don't have to.
****************************************************************************


> Rebasing should be done by some kind of visitor...

	but rebasing is done differently by mapping and parsing. Parsing rebases; mapping supplies root strategies.

	And anyway, we already have a visitor: RebaseStrategizer (should be rebase visitor i reckon)
	
	And so, RebaseStrategizer should handle exceptions. Although, as part of that, root strategies are supplied by the mapping hierarchy.

	The serving of root strategy is highly coupled with each strategy's innards, and so would seem to belong to each each class individually.
	
	
	
	
	
	




> before-and-after hooks should only apply after all filtering done.


> un-rebaseable predicates should either throw consistent exception
  or cause all data to be brought forth first! - dependent on switch


> Fancy demo project: OData! Info about each request...
	
> EF-mapped entities can't be projected to... need to do this client-side.
	- so, server-side projection that would normally be attempted should be checked with regime - if unacceptable, stick on client (this seems slow...)
	
> Ensure no static dictionaries about: ioc container should deal with this
  

> Test cache behaviour...

> Unary strategies must be sensitive to whether the set has been re-limited on the client:
	different strategies needed in this case 

> Test projection expressions for inputs. Use IProjectionInputDetector interface.

> How to hook in provider-specific extensions from other projects - needed to limit dependencies. 
	Surely has to be some configuration option, and type-gathering at initialization.

> Compiled little functions to cached by their expression trees

> Predicates to be split as much as possible to get as much on server as we can

