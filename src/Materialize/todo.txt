
TO DO! ********************************************




	Parser -> ParseStrategySource -> MapperRule -> MapperStrategy -> IModifier

	Parser -> ParseStrategySource -> MethodRule -> WhereStrategizer -> WhereOnClientStrategy -> IModifier
	

> In parsing, strategizers and rules are really at same level, have same function.
	Would seem neater to have specialised StrategyCondition classes - or *rules?*


> Parse strategies shouldn't be explicitly setting fetch type in ctors....

> Changes of cardinality elsewhere are currently ignored in parsing

> Add T4 template to test project, will create 50 random queries, and test result against the same applied to an enumeration. These will all appear in test explorer, and will be refreshable. SourceRegime used should also be
  random (although this latter will give different results each time: not so good!)


> Should all would-be prependers of predicates to the source query be aware of clientside filtering?


> Split to new solution: AutoMapper.Piped
	Problem of git history...
	

> Only explicitly-marked properties should be treated as transitive.


> before-and-after hooks should only apply after all filtering done.


> Client-side filter predicates currently being compiled each time HORRIFIC!!!!!!
	need to parameterize and store with cache...
	This touches on the whole transformer-expression thing.



> Fancy demo project: OData! Info about each request...
	
> EF-mapped entities can't be projected to... need to do this client-side.
	- so, server-side projection that would normally be attempted should be checked with regime - if unacceptable, stick on client (this seems slow...)
	
> Ensure no static dictionaries about: ioc container should deal with this
  

> Test cache behaviour...

> Unary strategies must be sensitive to whether the set has been re-limited on the client:
	different strategies needed in this case 

> Test projection expressions for inputs. Use IProjectionInputDetector interface.

> How to hook in provider-specific extensions from other projects - needed to limit dependencies. 
	Surely has to be some configuration option, and type-gathering at initialization.

> Compiled little functions to cached by their expression trees

> Predicates to be split as much as possible to get as much on server as we can

