


> A DREAM
	Ideally would distil various clauses into formal graph before simplifying the same graph, rearranging its parts,
	and reconstituting as bound query expressions.

	Each transformation would relate to a type domain - a graph with a root type.

	Each transformation (or at least most of them) would do something to this domain. And each transformation would have some
	responsibility for rebasing between these abstract domains.

	But the domain isn't just the rooted type graph, it's also the accumuluated stack of predicates that limit its values.

	The types and the predicates are tightly bound. Predicates are only in terms of instances, and limit the root node aspectually. Each non-multiple type graph detail is a clarifying of the central multiple node in profile.

	A projection of the type root is therefore a translation to another set

	And a SelectMany? Is a projection merely, albeit one that also changes the power(?) of the set. Certainly can't guarantee
	its similar cardinality. But really, it is the concrete relation between the domains that is impassible - their actual structure - rather than the abstract notion of cardinality. A simple projection is passible, can be simply rebased if
	the projection is transparent. 

	So we start with a simple list of tranformative elements, one after the other and in situ - that is, not randomly thrown together, but all in a meaningful chain. But from these elements we work out the spaces they demarcate - each one is a boundary between two zones, which zones now become the elements. The initial transformations become relations between substantive things. Space becomes gelid, is sliced into cuboid lumps.

	The most complicated domain boundary is that spanned by the mapping projections.

	But given all of this, all we want is the source, and the dest, and the relations between them. Intervening stages retreat out of view, dissolve into dusk. Two opposite landmasses, connected by taut, complicated strings. But these strings are necessarily tangled. And these tangles are themselves gelid lumps. So the intervening stages aren't to be relegated, but appreciated instead as the objects of our work, the messy fixtures to be simplified.

	We would then clean up here, and rationalise in a nicer, more hygienic space.

	Seems that both the individual strings linking projections and more general differences, such as power, etc, are important in strategization. The strings are needed to ascertain transparency, and to in some cases simplify away intervening spaces (as mere stepping stones, say). That is to say that the strings feed into the qualities, which are then used in the higher-level orchestration of parts.

	For the thousandth time, this all sounds like what we already have in place. EXCEPT for the fact that the strategies are brittly nestled. No rearranging them. They each have their (semi-)arbitrary spot, and won't be relinquishing it soon.
	Some can be shortcircuited, it is true.

	But already we have the notion of type domains, between which predcates can be rebased. 

	These domains don't at the moment touch on in-place constraints, however.

	***********************************************************************************************

	Would maybe be nice if there were three(!) rewriting passes. Two on server side, and one on the client.

	The first would be a kind of 'pre' pass, before any projections or mapping operations. This would be the PreFilter pass.

	Then there would be the Mapping pass.

	Then there would be the client-side transrm pass.

	-> an opening up of placement possibilities. Instead of being forced to operate in reverse, could append source-domain filters
		in the correct order. Simplification.


	The three passes:
		SourceFilter
		SourceProject
		LocalTransform


	Various modifiers therefore need rewriting, hey-ho.


	*************************************************************************************************

	But what about our reliance on flags to tell us what filtering goes on above?

	A DREAM #2:
		Instead of rewriting actual expressions, the strategies could place transformations onto hooks, that could then be inspected downstream. No filters in place on LocalTransform? then we can hook our own filters onto SourceFilter, if the predicate can be rebased. 

		In which case it wouldn't be a matter of programmerly discipline to flag up certain situations for the benefit of unknown others, but an actual act of inspection by the class concerned. Actions made public, so all can see, and 'sort themselves out'.
		
		****

		Strategies would emplace these hooked modifiers in a pattern to their liking, and there they would hang for the duration.

		Or rather, a *strategizer* would do the hanging, decorating the tree, etc.

	************************************************************************************************














> ParseStrategy source types are currently a bit of a mess. 
	ParseStrategies: like matryoshka dolls.

	Therefore, their source types aren't the type that couples them to their immediate upstream
	strategy. Instead, the source type refers to the very first input, before delegation upstream
	is done, before the initial rewriting even.

	So, I need to see what source type is used for, in practice. Nothing, it seems. Only rebasing.

	SourceType is to be set from outside. It definitely, definitely shouldn't be set from upstream, rather the opposite.

	FetchType: should parser care? Well, as long as parsing has to do with rewriting and transforming,
	it's a very relevant concept.

	Of course, the whole fetching over a gap thing could be encapsulated withing MapperStrategy. Parsing would thereafter
	be agnostic as to how it was actually getting the realised data.

	We could clear FetchType away from the world of IParseStrategy, but to do so would forbid us from affecting
	the cardinality/multiplicity at the point of fetching. This is a very reasonable tactic in our arsenal.
	(although any such change could surely be done at source, and consequent mapping operations could reflect
	the changed multiplicity?) Yet a change in multiplicity is sometimes coupled with a filter, and here we have to
	detect whether the filter's predicate can be rebased to the source type domain. And to detect this, we need to
	pass it by our upstream feeders: they have control over our tactics. As it is, we immediately delegate upstream,
	and to do this we must have already stated our type expectations. We can't then decide afterwards to change the 
	type we want from above... 

	All in all, a sneaky appending of a first(), then an even more sneaky repackaging of this into an array at
	transformation, is irreplacable. But do we want an explicit fetch type? No harm, except for in the brittle
	stubborness of an old concept.

	*****************************************************************************

	There could be a lot going for leaving mapping to the mapping layer. It would make more conceptual sense. 

	It woud fit the traditional query set-up, as in "leave upstream to fend for itself, let us deal with what
	we receive." Yet our mission here is no this. Instead each query clause must be given the chance to interfere
	with what is upstream: this is how we effect our magic. Each posterior must affect the anterior. Roles are
	reversed. Following the tack of "leave the upstream alone", and being ignorant of fetching (we would instead
	just rewrite before, and transform after) robs us of our possibility.

	******************************************************************************

	Type mapping thus becomes part of parsing. Parsers may also change the type. And so the TypeVector needs
	to be put in ParseContext.


	But, again against the old conception, how does the parser know what types to map? Surely from delegating
	inwards to its MapAs participle... rather than knowing transcendentally beforehand, via Reifiable's shim.

	Reifiable doesn't know what the overall query will return, as that is down to any projections within the
	query itself (such as, for instance, MapAs<T>()!) 

	So, outer clauses would have to initially delegate upwards to know the full typevector (which itself would be
	affected by upstream strategization). What would they initially know? Their dest type and destelem - these must
	match the method typeargs. The source type, however, would seem to be inherited from above, as it is determined
	by the base expression, whatever that is. So we know the source type transcendentally.

	What's the problem then? The problem's in pre-defining an entire typevector. SourceType is set from the start.
	Then the outermost clause is processed (after a depth-first delegation) and it knows its own output: it sets its
	own DestType. No overall typevector is ever pre-determined. ParseContext only keeps the SourceType.

	*******************************************************************************

	What about the case of chained MapAs<> functions? Sounds mad, like, but syntactically legitimate.

	I s'pose two Reifiables would be created... would actually work.





