<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)..\Materialize.SequenceMethods\bin\$(Configuration)\Materialize.SequenceMethods.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Security" #>
<#@ import namespace="Materialize.SequenceMethods" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Reflection;

namespace Materialize.Reify2.Parsing2.SeqMethods 
{
	abstract class QyMethodParserBase 
	{
		protected delegate IEnumerable<ITransition> SubParser(MethodParseSubject s);


		protected IDictionary<MethodInfo, Func<QyMethodParserBase, SubParser>> _dSubParsers 
			= new Dictionary<MethodInfo, Func<QyMethodParserBase, SubParser>>() {
<#foreach(var m in SeqMethodMap.Methods.Values) {#>
				{ QyMethods.<#=m.Name#>, @this => @this.Parse<#=m.Name#> },
<#}#>
			};




	<#
	foreach(var m in SeqMethodMap.Methods.Values) {
	#>	///<summary>
		///<#=SecurityElement.Escape(m.Qy.Describe())#>
		///</summary>
		protected virtual IEnumerable<ITransition> Parse<#=m.Name#>(MethodParseSubject s) {
			throw new NotImplementedException("No method subparser supplied for Queryable method <#=m.Qy.Describe()#>");
		}

	<#
	}
		#>
	
	} 

}