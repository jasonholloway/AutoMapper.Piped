<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)..\Materialize.SequenceMethods\bin\$(Configuration)\Materialize.SequenceMethods.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Materialize.SequenceMethods" #>
<#@ output extension=".cs" #>
using Materialize.SequenceMethods;
using Materialize.Types;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

namespace Materialize.Reify2.Transitions 
{
<#foreach(var m in SeqMethodMap.Methods.Values)
{#>
	  partial class <#=m.Name#>Transition : SeqTransition, ITakesSource
	  { 
			static readonly SeqMethod _seqMethod = SeqMethods.<#=m.Name#>;
			static readonly Type[] _paramTypesQy = _seqMethod.Qy.GetParameters().Select(p => p.ParameterType).ToArray();
			static readonly Type[] _paramTypesEn = _seqMethod.En.GetParameters().Select(p => p.ParameterType).ToArray();
			static readonly Type[] _typeParamsQy = _seqMethod.Qy.GetGenericArguments();
			static readonly Type[] _typeParamsEn = _seqMethod.En.GetGenericArguments();
			
<#foreach(var p in m.Qy.GetParameters())
{#>			readonly ArgValue _<#=p.Name#>Arg;
<#}
foreach(var p in m.Qy.GetParameters())
{#>			
			public Expression <#=CapitalizeFirst(p.Name)#> {
				get { return _<#=p.Name#>Arg.Expression; }
				set { _<#=p.Name#>Arg.Expression = value; }
			}
<#}#>		
			public override SeqMethod SeqMethod { 
				get { return _seqMethod; }
			}

			public override IEnumerable<Expression> Args {
				get { return new[] { <#=(string.Join(", ", m.Qy.GetParameters().Select(p => "_" + p.Name + "Arg.Expression")))#> }; }
			}
			
			public <#=m.Name#>Transition()
			{
				_modes = new Mode[] {
					new Mode(_seqMethod.Qy, _typeParamsQy, _paramTypesQy),
					new Mode(_seqMethod.En, _typeParamsEn, _paramTypesEn)
				};
					
<#foreach(var p in m.Qy.GetParameters()) {
#>				_<#=p.Name#>Arg = new ArgValue(new[] { _modes[0].Args[<#=p.Position#>], _modes[1].Args[<#=p.Position#>] });
<#}#>
			}
			
			public <#=m.Name#>Transition(MethodCallExpression ex) : this()
			{
				var typeArgTypes = ex.Method.GetGenericArguments();

				var origTypeArgsQy = _typeParamsQy.Zip(typeArgTypes, (p, a) => new TypeArg(p, a));															
				var origTypeArgsEn = _typeParamsEn.Zip(typeArgTypes, (p, a) => new TypeArg(p, a));

				foreach(var typeArg in origTypeArgsQy) {
					_modes[0].TypeArgHub.Register(typeArg, null);
				}
				
				foreach(var typeArg in origTypeArgsEn) {
					_modes[1].TypeArgHub.Register(typeArg, null);
				}

<#foreach(var p in m.Qy.GetParameters().Skip(1)) {
#>				_<#=p.Name#>Arg.Expression = ex.Arguments[<#=p.Position#>];
<#}#>			}

			Expression ITakesSource.Source {
				get { return _<#=m.Qy.GetParameters()[0].Name#>Arg.Expression; }
				set { _<#=m.Qy.GetParameters()[0].Name#>Arg.Expression = value; }
			}
	  }


<#  }#>
}

<#+

	static string CapitalizeFirst(string s) {
		return new string(s.ToArray().Select((c, i) => i == 0 ? char.ToUpperInvariant(c) : c).ToArray());
    }

#>