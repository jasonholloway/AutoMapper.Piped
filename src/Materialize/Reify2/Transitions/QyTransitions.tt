<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)..\Materialize.SequenceMethods\bin\$(Configuration)\Materialize.SequenceMethods.dll" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Materialize.SequenceMethods" #>
<#@ output extension=".cs" #>
using Materialize.SequenceMethods;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;

namespace Materialize.Reify2.Transitions 
{
<#foreach(var m in SeqMethodMap.Methods.Values)
{#>
	  partial class <#=m.Name#>Transition : QyTransitionBase 
	  { 
<#foreach(var p in m.Qy.GetParameters().Skip(1))
{#>			Expression _<#=p.Name#>;
<#}#>

			public override SeqMethod SeqMethod { get; } = SeqMethods.<#=m.Name#>;

			public override IEnumerable<Expression> Args {
				get { 
<#foreach(var p in m.Qy.GetParameters().Skip(1)) {
#>					yield return _<#=p.Name#>;
<#}#>
					yield break;
				}
			}
			
			public static <#=m.Name#>Transition Create(MethodCallExpression ex) {
				return new <#=m.Name#>Transition() {
<#foreach(var p in m.Qy.GetParameters().Skip(1)) {
#>					_<#=p.Name#> = ex.Arguments[<#=p.Position#>],
<#}#>				};
			}
	  }

<#  }#>
}